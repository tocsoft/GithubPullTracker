@model GithubPullTracker.Models.PullRequestCommentsView
@{

    ViewBag.Title = Model.Title + " by " + Model.CreatedBy.login + " · Pull Request #" + Model.Number + " · " + Model.RepositoryOwner + "/" + Model.RepositoryName;

}
@section header
{
    <div class="title-bar">
        <h1><i class="icon icon-repo"></i><a class="owner" href="~/@Model.RepositoryOwner">@Model.RepositoryOwner</a> / <a class="repo" href="~/@Model.RepositoryOwner/@Model.RepositoryName">@Model.RepositoryName</a></h1>
    </div>
}
@Html.Partial("PullRequestHeader")

        <div id="home">
            <div class="main-comment" id="description">
                <a href="@Model.CreatedBy.html_url" target="_blank" class="avatar">
                    <img src="@(Model.CreatedBy.avatar_url)&s=40"  alt="@Model.CreatedBy.login" />
                </a>
                <div class="comment">
                    <div class="header">
                        <a href="@Model.CreatedBy.html_url" target="_blank">@Model.CreatedBy.login</a> commented <time class="timeago" datetime="@Model.CreatedAt.ToString("o")">@Model.CreatedAt</time>
                    </div>


                    @if (string.IsNullOrWhiteSpace(Model.Details))
                    {
                        <div class="markdown">
                            <em>No description provided.</em>
                        </div>
                    }
                    else
                    {
                        <div class="markdown">@Html.Raw(Model.Details)</div>
                    }
                </div>

            </div>

                @foreach (var evnt in Model.Events)
                {
                    @Html.DisplayFor(c=>evnt)
                }

        </div>

<aside id="sidebar">
    <section>
        <h3>Labels</h3>

        @if (Model.Labels.Any())
        {
            foreach (var l in Model.Labels)
            {
                <span class="label" style="background-color:#@l.color">@l.name</span>
            }
        }
        else
        {
            <span>None yet</span>
        }
    </section>
    <section>
        <h3>Assignee</h3>
        @if (Model.Assignee != null)
        {
            <a href="@Model.Assignee.html_url">
                <img src="@(Model.Assignee.avatar_url)&s=40" alt="@Model.Assignee.login" />
                @Model.Assignee.login
            </a>
        }
        else
        {
            <span>Unassigned</span>
        }
    </section>
    
    <a href="http://github.com/@Model.RepositoryOwner/@Model.RepositoryName/pull/@Model.Number" target="_blank" class="right show-fixed">view on github</a>
</aside>



        

<script type="x-template" id="home-comment-template">
    @Html.Partial("_MainCommentTemplate")
</script>
<script type="x-template" id="home-file-comment-template">
    @Html.Partial("_MainFileCommentTemplate")
</script>
<script type="x-template" id="inline-file-comment-template">
    @Html.Partial("_InlineFileCommentTemplate")
</script>



@section scripts{
    <style id="mergeHeight">
        .CodeMirror-merge {
            height: auto;
        }
    </style>
    <script>
        (function ($) {
            $.fn.contrastingText = function () {
                var el = this,
                    transparent;
                transparent = function (c) {
                    var m = c.match(/[0-9]+/g);
                    if (m !== null) {
                        return !!m[3];
                    }
                    else return false;
                };
                while (transparent(el.css('background-color'))) {
                    el = el.parent();
                }
                parts = el.css('background-color').match(/[0-9]+/g);
                this.lightBackground = !!Math.round(
                    (
                        parseInt(parts[0], 10) + // red
                        parseInt(parts[1], 10) + // green
                        parseInt(parts[2], 10) // blue
                    ) / 765 // 255 * 3, so that we avg, then normalise to 1
                );
                if (this.lightBackground) {
                    this.css('color', 'black');
                } else {
                    this.css('color', 'white');
                }
                return this;
            };
        }(jQuery));

        $('.label').contrastingText();

        window.repocontext = '@(Model.RepositoryOwner)/@(Model.RepositoryName)';
        var itm = $('#sidebar');
        var posTop = itm.position().top;
        var posleft = itm.position().left;
        var fixSize = function () {
            if (itm.hasClass('fixed')) {
                itm.removeClass('fixed');
                var pos = itm.position().left - lastScrollX;
                var width = itm.width();
                itm.css({ "left": pos + 'px', width: width + 'px' });
                itm.addClass('fixed');
            }
        }
        $(window).resize(fixSize);
        var lastScrollX = 0;
        $(window).on('scroll', function () {
            
            if (window.scrollX > 0 && window.scrollX != lastScrollX)
            {
                lastScrollX = window.scrollX;
                fixSize();
            }
            if (window.scrollY > posTop) {
                itm.addClass('fixed');
                fixSize();
            } else {
                itm.attr('style', '');
                itm.removeClass('fixed');
            }

        });


        @*diffViewScript('@Model.CurrentFile', '@Model.HeadSha', '@Url.Action("ViewPullRequest")', @Html.Raw(Model.TreeData.ToString()), '@Model.RepositoryOwner','@Model.RepositoryName')*@

    </script>
}