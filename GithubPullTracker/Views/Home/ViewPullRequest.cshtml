@model GithubPullTracker.Models.PullRequestView
@{ 
    

}
<style>

</style>
<div id="splitter">
    <div id="jstree_demo_div"></div>

    <div id="file_diff">
            
    </div>
</div>

@section scripts{
    <style id="mergeHeight">       
         .CodeMirror-merge {
            height:auto;
        }
    </style>
<script>
    var dmp = new diff_match_patch();
    $(function(){
        
        var width =  lscache.get('spliterWidth') || ($(window).width() * 0.8);
        $("#splitter").splitter({
            sizeRight: width
        });
    });
    $(function () {
        var data = @Html.Raw(Model.JsTreeData);
        var blankState = null;
        var pathPrefix = '@Url.Action("ViewPullRequest")';
        var idSeed = 0;
        function updateType(node){
            
            //due to the recursive nature this will always be the lowest item
            if(node.state.selected){
                blankState = node;
            }

            if(node.data.type == 'file'){
                var key = node.data.sha;
                node.id = "file_" + key;
                if(lscache.get(key)){
                    node.type = 'file_visited';
                }else{
                    node.type = 'file_new';
                }

            }else{
                node.type = 'folder';
                node.id = "folder_" + (++idSeed);
            }

            if(node.children && node.children.length > 0)
            {
                for(var i = 0; i<node.children.length; i++){
                    updateType(node.children[i]);
                }
            }
        }
        for(var i = 0; i<data.length; i++){
            updateType(data[i]);
        }
        //lets update types in data based on local file visited cache

        $('#jstree_demo_div').jstree({
            'core': {
                'data': data
            },
            "types" : {
                "folder" : {
                    "icon" : "glyphicon glyphicons-folder-open"
                },
                "file_new" : {
                    "icon" : "glyphicon glyphicons-unchecked file_new",
                    "a_attr" : { "class" : 'file_new' }
                },
                "file_visited" : {
                    "icon" : "glyphicon glyphicons-check"
                }
            },
            "plugins" : [ "types" ]
        }).on('changed.jstree', function(e, d){
            if(d.selected.length ){
                var node = d.instance.get_node(d.selected[0]);
                loadPage(node, true);              
                if(node.data.type=='file'){
                    d.instance.set_type(d.node, "file_visisted");
                }
            }
        });

        var currentNode = null;
        function loadPage(node, navigate)
        {
            //we are already on this node don't load it.
            if(currentNode !== null && node !== null && currentNode.id == node.id){
                return;
            }
            currentNode = node;
            if(node != null){
                var targetPath = pathPrefix + '/files/' + node.data.path;
                //we cache the page visit for 12 months so browse3r will attempt to remember visited sha's
                lscache.set(node.data.sha, true, 60 * 24 * 7 * 52);
                if(navigate){
                    if(window.location.pathname == targetPath ){
                        history.replaceState(node, null, targetPath);
                    }else
                    {
                        history.pushState(node, null, targetPath);
                    }
                }

                showFileDiff(node.data.path);

                console.log(targetPath);
            }else{
                //show homepage!!
                console.log(pathPrefix);
            }
        }
        
        function loadMimeRenderer(info, cb){

            if(!info.mime && info.mimes){
                info.mime= info.mimes[0];
            }

            var script = document.createElement('script');
            script.type = 'text/javascript';
            script.async = true;
            script.onload = function(){
                // remote script has loaded
                info.loaded = true;
                cb(info);
            };
            script.src = '/scripts/mode/'+info.mode + '/'+info.mode + '.js';
            document.getElementsByTagName('head')[0].appendChild(script)
        }
        function getMimeSettings(filename, cb){

            var r= filename.lastIndexOf('.');
            if(r > -1){
                var ext = filename.substr(r+1, filename.length - r).toLowerCase();
                  for(var i in CodeMirror.modeInfo){
                      var info = CodeMirror.modeInfo[i];
                      if(info.ext){
                          if(info.ext.indexOf(ext) > -1){
                            

                              if(info.loaded){
                                  cb(info);
                                  return;
                              }else{
                                  loadMimeRenderer(info, cb);
                                  return;
                              }
                          }
                    }                
                }
            }
            cb({ mime:null});
            return;
        }

        var diffElm = null;
        $(document).bind('keydown', 'j', function(){
            if(diffElm){
                diffElm.edit.execCommand("goNextDiff"); 
            }
        });
        
        $(document).bind('keydown', 'k', function(){
            if(diffElm){
                diffElm.edit.execCommand("goPrevDiff"); 
            }
        });
       
        function showFileDiff(path){
            
            var targetPath = pathPrefix + '/files/' + path;
            
            $.get(targetPath, function(data){
                getMimeSettings(path, function(info){
                    var elm = $('#file_diff');
                    elm.html("");//clear the dom
                    var winh =  $(window).height();
                    $('#splitter').height(winh ).trigger("resize");
                    $('#mergeHeight').html(".CodeMirror-merge, .CodeMirror-merge .CodeMirror { height: "+winh+"px;}")
                    
                    //diffElm = $("<div />");
                    //parent.append(diffElm );
                    var source = data.source;
                    var target = JsDiff.applyPatch( source, data.patch);

                    diffElm = CodeMirror.MergeView(elm[0], {
                        origLeft :  source,
                        value : target,
                        lineNumbers: true,
                        mode: info.mime, 
                        connect :null,
                        readOnly: 'nocursor',
                        allowEditingOriginals : false,
                        collapseIdentical : false,
                        revertButtons : false,
                        lineWrapping:true,
                        gutters : ["CodeMirror-linenumbers", "github-comments"]
                    });
                    //load comments
                    
                    function addComments(btn){
                        //show an add commentUI
                        //inject the add comment widget
                    }
                    var commentBlocks = {};

                    function addComment(doc, line, comment)
                    {
                        commentBlocks[doc] = commentBlocks[doc] || {};
                        var block = commentBlocks[doc][line];
                        if(!block)
                        {
                            var elm = $('<div class="commentList" />');
                            var widget = doc.addLineWidget(line, elm[0], { coverGutter : true, noHScroll: true, });
                            commentBlocks[doc][line] = block ={ elm:elm, widget:widget};
                        }
                        block.elm.append($('<div class="comment"><div class="header"><img src="'+ comment.commenter.avatarUrl +'&s=40"> ' + comment.commenter.login +' added a note <span class="timeago">'+comment.createdAt+'</span></div>' + marked(comment.body) + '</div>'));
                        block.widget.changed();
                        //dot adda single widget per comment append to the old widget if exists
                        
                    }
                    var targetEditor = diffElm.edit;
                    var sourceEditor = diffElm.left.orig;
                    var targetDoc = targetEditor.getDoc();;
                    var sourceDoc = sourceEditor.getDoc();

                    for(var i in data.comments){

                        var comment = data.comments[i];
                        if(comment.sourceLine > 0){
                            
                            addComment(sourceDoc,  comment.sourceLine, comment);    
                        }
                        if(comment.targetLine > 0){
                            
                            addComment(targetDoc,  comment.targetLine, comment);    
                        }
                        
                    }

                    function markPatch(editor, map){
                        var doc = editor.getDoc();
                        var lineCount = doc.lineCount();

                        for(var i = 0; i<lineCount; i++){
                            var mappedPage = map[i+1]
                            if(mappedPage > -1){
                             
                                var btn = $('<span class="addcomment"></span>');
                                btn.click(function(){
                                    addComments(this);
                                });
                                btn.data("patchLine", mappedPage);
                                editor.setGutterMarker(i, "github-comments", btn[0]);
                            
                            }else{
                                doc.addLineClass(i, "wrap", "not-in-patch");
                            }
                
                        }
                    }

                    markPatch(targetDoc, data.pageMap.TargetFile);
                    markPatch(sourceDoc, data.pageMap.SourceFile);

                    
                    diffElm.resize();
                    //diffElm .mergely({
                    //    cmsettings :{ },
                    //    ignorews:false,
                    //    autoupdate:true,
                    //    autoresize:true,
                    //    fadein:false
                    //}); 
                    ////$("#splitter").splitter();
                    //diffElm.mergely('lhs', data.source);
                    //diffElm.mergely('rhs', data.target);
                    //setTimeout(function(){
                    //    diffElm.mergely('resize');
                    //    diffElm.mergely('scrollToDiff', 'next');
                    //},100);
                });
            });

        }
        
        //diffElm .mergely({
        //    ignorews:false,
        //    autoupdate:true,
        //    autoresize:true,
        //    fadein:false
        //});        
        var to;
        $("#splitter").on("resize", function(){
            clearTimeout(to);
            to = setTimeout(function(){
                var width = $(window).width() - $('#jstree_demo_div').width(); 
                lscache.set('spliterWidth', width);
                if(diffElm){
                    diffElm.edit.refresh();
                    diffElm.left.orig.refresh();
                    
                    diffElm.resize();
                }
            },100);
            if(diffElm){
                diffElm.resize();
            }
           
        });
        var to1;
        $(window).resize(function(e){
            //diffElm .mergely('resize');    
            if(e.target === window){
                clearTimeout(to1);
                to1 = setTimeout(function(){
                    var winh =  $(window).height();
                    $('#splitter').height(winh ).trigger("resize");
                    $('#mergeHeight').html(".CodeMirror-merge, .CodeMirror-merge .CodeMirror { height: "+winh+"px;}")
                    //$('#file_diff .CodeMirror-merge').height(winh );

                });
            }
        }).resize();
        
        window.onpopstate = function(s)
        {
            var currentStateNode = s.state;

            var jstree = $('#jstree_demo_div').jstree(true);
            jstree.deselect_all();
            if(currentStateNode){
                jstree.select_node(currentStateNode, true);
            }
            loadPage(currentStateNode, false);
        }

            if(blankState !=null){
                history.replaceState(blankState, null, pathPrefix + '/files/' + blankState.data.path);
            }else{
                history.replaceState(null, null, pathPrefix);
            }
            loadPage(blankState, false);
    });

</script>
    }