@model GithubPullTracker.Models.RepoSearchResults


@{
    ViewBag.Title = "Search";
    ViewBag.HideRepo = true;
}

@section header
{
    <div class="title-bar">
        <h1><i class="icon icon-repo"></i><a class="owner" href="~/@Model.Repo.owner.login">@Model.Repo.owner.login</a> / <a class="repo" href="~/@Model.Repo.owner.login/@Model.Repo.name">@Model.Repo.name</a></h1>

    </div>
}

    <div id="searchResults" class="noRepos">


        <div class='header'>
            <div class="left">
                <a href="@Model.GenerateStateUrl(GithubClient.RequestState.Open)" class="@(Model.State == GithubClient.RequestState.Open?"selected" : null)">
                    <i class="icon icon-git-pull-request"></i>
                    <span>@Model.OpenHits</span>
                    Open
                </a>
                <a href="@Model.GenerateStateUrl(GithubClient.RequestState.Closed)" class="@(Model.State == GithubClient.RequestState.Closed?"selected" : null)">
                    <i class="icon icon-check"></i>
                    <span>@Model.ClosedHits</span>
                    Closed
                </a>
            </div>
            <div class="right">
                <a href="@Model.GenerateConnectionUrl(GithubClient.RequestConnection.All)" class="@(Model.ConnectionType == GithubClient.RequestConnection.All?"selected" : null)">All</a>
                <a href="@Model.GenerateConnectionUrl(GithubClient.RequestConnection.Assigned)" class="@(Model.ConnectionType == GithubClient.RequestConnection.Assigned?"selected" : null)">Assigned</a>
                <a href="@Model.GenerateConnectionUrl(GithubClient.RequestConnection.Author)" class="@(Model.ConnectionType == GithubClient.RequestConnection.Author?"selected" : null)">Created</a>
                <a href="@Model.GenerateConnectionUrl(GithubClient.RequestConnection.Involved)" class="@(Model.ConnectionType == GithubClient.RequestConnection.Involved?"selected" : null)">Involved</a>
            </div>
        </div>
        <div class="rows">
            @foreach (var result in Model.Items)
            {
                <div class="@(result.ClosedAt.HasValue ? "closed" : null)">
                    <div class="title">
                        <i class="icon icon-git-pull-request"></i>


                        <a class="pull" href="@Url.Action("ViewPullRequest", "PullRequest", new { owner = result.RepositoryOwner, repo = result.RepositoryName, reference = result.Number })">
                            @result.Title
                        </a>
                        @foreach (var l in result.Labels)
                        {
                            <span class="label" style="background-color:#@l.color">@l.name</span>
                        }@if (result.Assignee != null)
                        {
                        <a class="user"  target="_blank"  href="@result.Assignee.html_url"><img alt="@result.Assignee.login" src="@(result.Assignee.avatar_url)&s=40"></a>
                        }
                    </div>
                    <div class="meta">
                        #@(result.Number)
                        @if (result.ClosedAt.HasValue)
                {
                            <text> by
                                <a href="@result.CreateBy.html_url" target="_blank">@result.CreateBy.login</a>
                                was closed <time class="timeago" datetime="@result.CreatedAt.ToString("o")">@result.CreatedAt.ToString()</time>
                            </text>
                        }
                        else
                        {
                            <text>
                                opened
                                <time class="timeago" datetime="@result.CreatedAt.ToString("o")">@result.CreatedAt.ToString()</time> by
                                <a href="@result.CreateBy.html_url" target="_blank">@result.CreateBy.login</a>
                            </text>
                        }
                    </div>
                </div>
            }
        </div>
        @if (Model.PageCount > 1)
        {
            //sectinos top draw

            List<int> pages = new List<int>();

            pages.Add(1);
            pages.Add(2);
            pages.Add(3);

            pages.Add(Model.Page - 3);
            pages.Add(Model.Page - 2);
            pages.Add(Model.Page - 1);
            pages.Add(Model.Page);
            pages.Add(Model.Page + 1);
            pages.Add(Model.Page + 2);
            pages.Add(Model.Page + 3);

            pages.Add(Model.PageCount - 1);
            pages.Add(Model.PageCount);
            pages = pages.Where(x => x >= 1 && x <= Model.PageCount).Distinct().ToList();

            <div class="pagination">
                <nav>
                    @if (Model.Page > 1)
                {
                        <a href="@Model.GeneratePageUrl(Model.Page -1)">Previous</a>
                    }
                    else
                    {
                        <span>Previous</span>
                    }
                    @for (var i = 0; i < pages.Count; i++)
                    {
                        if (i > 0 && pages[i - 1] + 1 != pages[i])
                        {
                            //we skeipped some
                            <span>&hellip;</span>
                        }
                        <a href="@Model.GeneratePageUrl(pages[i])" class="@(pages[i] == Model.Page ? "selected" : null)">@pages[i]</a>
                    }
                    @if (Model.Page < Model.PageCount)
                {
                        <a href="@Model.GeneratePageUrl(Model.Page +1)">Next</a>
                    }
                    else
                    {
                        <span>Next</span>}
                </nav>
            </div>
        }
    </div>